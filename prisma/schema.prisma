generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String         @id @default(uuid())
  name        String
  logo        String?
  address     String
  phone       String?
  email       String?        @unique
  website     String?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  extra_data  Json?
  admins      Admin[]
  students    Student[]
  teachers    Teacher[]
  parents     Parent[]
  grades      Grade[]
  classes     Class[]
  subjects    Subject[]
  lessons     Lesson[]
  exams       Exam[]
  assignments Assignment[]
  events      Event[]
  announcements Announcement[]
}

model Admin {
  id         String   @id @default(uuid())
  username   String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra_data Json?
  schoolId   String
  school     School   @relation(fields: [schoolId], references: [id])
}

model Student {
  id          String       @id @default(uuid())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  extra_data  Json?
  parentId    String
  parent      Parent       @relation(fields: [parentId], references: [id])
  classId     String
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     String
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
}

model Teacher {
  id         String    @id @default(uuid())
  username   String    @unique
  name       String
  surname    String
  email      String?   @unique
  phone      String?   @unique
  address    String
  img        String?
  bloodType  String
  sex        UserSex
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  subjects   Subject[]
  lessons    Lesson[]
  classes    Class[]
  birthday   DateTime
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Parent {
  id         String    @id @default(uuid())
  username   String    @unique
  name       String
  surname    String
  email      String?   @unique
  phone      String    @unique
  address    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  students   Student[]
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Grade {
  id         String    @id @default(uuid())
  level      Int       @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  students   Student[]
  classess   Class[]
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Class {
  id            String         @id @default(uuid())
  name          String        @unique
  capacity      Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  extra_data    Json?
  supervisorId  String?
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  lessons       Lesson[]
  students      Student[]
  gradeId       String
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
  schoolId      String
  school        School         @relation(fields: [schoolId], references: [id])
}

model Subject {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  teachers   Teacher[]
  lessons    Lesson[]
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Lesson {
  id         String       @id @default(uuid())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  extra_data Json?
  subjectId  String
  subject    Subject      @relation(fields: [subjectId], references: [id])
  classId    String
  class      Class        @relation(fields: [classId], references: [id])
  teacherId  String
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  exams      Exam[]
  assignments Assignment[]
  attendances Attendance[]
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
}

model Exam {
  id         String    @id @default(uuid())
  title      String
  startTime  DateTime
  endTime    DateTime
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  lessonId   String
  lesson     Lesson    @relation(fields: [lessonId], references: [id])
  results    Result[]
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Assignment {
  id         String    @id @default(uuid())
  title      String
  startDate  DateTime
  dueDate    DateTime
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra_data Json?
  lessonId   String
  lesson     Lesson    @relation(fields: [lessonId], references: [id])
  results    Result[]
  schoolId   String
  school     School    @relation(fields: [schoolId], references: [id])
}

model Result {
  id          String       @id @default(uuid())
  score       Int
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  extra_data  Json?
  examId      String?
  exam        Exam?        @relation(fields: [examId], references: [id])
  assignmentId String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id         String   @id @default(uuid())
  date       DateTime
  present    Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra_data Json?
  studentId  String
  student    Student  @relation(fields: [studentId], references: [id])
  lessonId   String
  lesson     Lesson   @relation(fields: [lessonId], references: [id])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  extra_data  Json?
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
}

model Announcement {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  extra_data  Json?
  classId     String?
  class       Class?   @relation(fields: [classId], references: [id])
  schoolId    String
  school      School   @relation(fields: [schoolId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}